// SPDX-License-Identifier: MPL-2.0
// (c) Hare authors <https://harelang.org>

use bytes;
use errors;

type sample = struct {
	msg: []u8,
	cipher: []u8,
	additional: []u8,
	key: sessionkey,
	nonce: nonce,
	mac: mac,
};

// test vector taken from the XChacha20-Poly1305-AEAD draft rfc
const rfcsample: sample = sample {
	msg = [
		0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64,
		0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
		0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c,
		0x61, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39,
		0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63, 0x6f, 0x75,
		0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79,
		0x6f, 0x75, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e,
		0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20,
		0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
		0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73, 0x63, 0x72, 0x65, 0x65,
		0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65,
		0x20, 0x69, 0x74, 0x2e,
	],
	additional = [
		0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5,
		0xc6, 0xc7,
	],
	key = [
		0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
		0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93,
		0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d,
		0x9e, 0x9f,
	],
	nonce = [
		0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
		0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53,
		0x54, 0x55, 0x56, 0x57,
	],
	cipher = [
		0xbd, 0x6d, 0x17, 0x9d, 0x3e, 0x83, 0xd4, 0x3b, 0x95, 0x76,
		0x57, 0x94, 0x93, 0xc0, 0xe9, 0x39, 0x57, 0x2a, 0x17, 0x00,
		0x25, 0x2b, 0xfa, 0xcc, 0xbe, 0xd2, 0x90, 0x2c, 0x21, 0x39,
		0x6c, 0xbb, 0x73, 0x1c, 0x7f, 0x1b, 0x0b, 0x4a, 0xa6, 0x44,
		0x0b, 0xf3, 0xa8, 0x2f, 0x4e, 0xda, 0x7e, 0x39, 0xae, 0x64,
		0xc6, 0x70, 0x8c, 0x54, 0xc2, 0x16, 0xcb, 0x96, 0xb7, 0x2e,
		0x12, 0x13, 0xb4, 0x52, 0x2f, 0x8c, 0x9b, 0xa4, 0x0d, 0xb5,
		0xd9, 0x45, 0xb1, 0x1b, 0x69, 0xb9, 0x82, 0xc1, 0xbb, 0x9e,
		0x3f, 0x3f, 0xac, 0x2b, 0xc3, 0x69, 0x48, 0x8f, 0x76, 0xb2,
		0x38, 0x35, 0x65, 0xd3, 0xff, 0xf9, 0x21, 0xf9, 0x66, 0x4c,
		0x97, 0x63, 0x7d, 0xa9, 0x76, 0x88, 0x12, 0xf6, 0x15, 0xc6,
		0x8b, 0x13, 0xb5, 0x2e,
	],
	mac = [
		0xc0, 0x87, 0x59, 0x24, 0xc1, 0xc7, 0x98, 0x79, 0x47, 0xde,
		0xaf, 0xd8, 0x78, 0x0a, 0xcf, 0x49,
	],
};


const noadsample: sample = sample {
	key = [
		0xdf, 0x23, 0xf4, 0xad, 0xe4, 0x6f, 0xc1, 0x41, 0x36, 0xe6,
		0x63, 0x48, 0x3c, 0xcd, 0x74, 0x56, 0x44, 0x6a, 0x56, 0x56,
		0xd8, 0xb4, 0x34, 0x30, 0xd4, 0xfd, 0x7b, 0xa8, 0x2c, 0x60,
		0xf7, 0x62,
	],
	msg = [
		0x9b, 0x0e, 0x38, 0x4b, 0x29, 0x09, 0x8e, 0xa3, 0xb4, 0x37,
		0x7c, 0x81, 0xba, 0xc0, 0xbf, 0x7e, 0x59, 0xc2, 0xdc, 0x0f,
		0x43, 0x03, 0x40, 0x1f, 0xd4, 0x1b, 0xae, 0x69, 0xfd, 0x0f,
		0x0f, 0x49, 0xc8, 0xef, 0xa2, 0x30, 0x21, 0x53, 0x4a, 0xfc,
		0x0c, 0xa6, 0xef, 0x3c, 0x34, 0xe9, 0x9c, 0xc7, 0x8b, 0xd7,
		0xe6, 0x02, 0xcd, 0xc5, 0x28, 0x43, 0x42, 0xe3, 0xdf, 0x32,
		0xf2, 0x28, 0xd9, 0x09, 0xca, 0xa4, 0x45, 0x19, 0x2a, 0x9e,
		0x2d, 0x99, 0xf1, 0x40, 0x55, 0x2f, 0xb4, 0xe0, 0x04, 0xd8,
		0x3b, 0x2e, 0x1e, 0xed, 0xff, 0xa6, 0x51, 0xd2, 0xe1, 0x22,
	],
	nonce = [
		0xe2, 0x5b, 0x34, 0x1f, 0xc2, 0x8b, 0x6e, 0xc3, 0x37, 0xa0,
		0x92, 0x45, 0xa8, 0xcb, 0x4b, 0x40, 0x3f, 0x24, 0x1c, 0x95,
		0xff, 0x72, 0xea, 0x1d,
	],
	cipher = [
		0x0b, 0xec, 0x57, 0xc8, 0x58, 0xf0, 0xc6, 0xb3, 0x42, 0x94,
		0x86, 0xce, 0xf3, 0x3f, 0x04, 0x19, 0x41, 0xc2, 0xf7, 0xc9,
		0x1f, 0x12, 0x9c, 0xbd, 0x68, 0xa8, 0xf2, 0xbe, 0xd3, 0xf3,
		0x11, 0xea, 0x6e, 0xae, 0x39, 0xca, 0x93, 0x06, 0x99, 0x70,
		0x67, 0xd6, 0xfa, 0xd8, 0x16, 0x4b, 0x2d, 0xf3, 0xb4, 0x73,
		0x22, 0x36, 0x4b, 0x2d, 0xac, 0xd2, 0xaa, 0xab, 0x13, 0x2a,
		0xd7, 0x05, 0x15, 0xbf, 0x18, 0x56, 0x20, 0xdb, 0xa4, 0xbb,
		0x38, 0xa8, 0x8b, 0x0d, 0x12, 0xcc, 0x3b, 0x47, 0x4c, 0xba,
		0x5f, 0x11, 0x75, 0x4e, 0x34, 0x87, 0x14, 0xe9, 0xb1, 0x23,
	],
	mac = [
		0x07, 0x92, 0x76, 0xd8, 0x7c, 0x77, 0x71, 0x4b, 0xa4, 0xf2,
		0x27, 0x66, 0x79, 0xeb, 0x38, 0xc1,
	],
	...
};

const nomsg: sample = sample {
	key = [
		0x10, 0x28, 0xbe, 0x0e, 0x0e, 0x46, 0x38, 0x0f, 0x12, 0x9f,
		0x56, 0x17, 0x21, 0xb8, 0x65, 0x44, 0x49, 0x0d, 0x48, 0x7a,
		0x46, 0x79, 0x5b, 0x9c, 0x54, 0xfd, 0x42, 0xc4, 0x53, 0x82,
		0x51, 0x14,
	],
	nonce = [
		0x35, 0x54, 0xec, 0x93, 0x4d, 0xd5, 0xdc, 0x90, 0xa2, 0xd3,
		0x72, 0xdc, 0xff, 0x0a, 0x73, 0x32, 0x5f, 0xbd, 0xcc, 0x36,
		0xab, 0x3f, 0x47, 0x1c,
	],
	additional = [
		0xbe, 0x71, 0xf2, 0x86, 0x5a, 0xb9, 0x1b, 0x3c, 0x07, 0x9b,
		0xa3, 0x3a, 0x34, 0xa3, 0x5e, 0x4a, 0x51, 0x34, 0xf5, 0x02,
		0x55, 0xb1, 0x97, 0x1d, 0xd8, 0xb8, 0xb0, 0x63, 0x07, 0x98,
		0x11, 0x7c, 0x4e, 0x40, 0xd1, 0xfe, 0xf7, 0x8d, 0xc8, 0xbc,
		0x45, 0x3c, 0x1f, 0x81, 0x2d, 0xf2, 0x98, 0x88, 0x36, 0x9d,
		0x0d, 0x2f, 0x71, 0xf5, 0xdb, 0x9d, 0x05, 0x5e, 0xc5, 0x4d,
		0x6d, 0xe3, 0xca, 0xbb, 0x46, 0xda, 0x99, 0x41, 0xb1, 0xcd,
		0x4e, 0xdc, 0xa3, 0x82, 0xc1, 0xb7, 0xd3, 0x5b, 0xae, 0x41,
		0x60, 0x6a, 0x59, 0x2e, 0xf9, 0xd3, 0xbf, 0x44, 0x95, 0xbd,
	],
	mac = [
		0xe9, 0x50, 0xd4, 0x3f, 0x0a, 0x84, 0x69, 0x24, 0xa3, 0x9a,
		0xe6, 0x06, 0x29, 0xf8, 0x16, 0xcf,
	],
	...
};

const nothing: sample = sample {
	key = [
		0xbb, 0xf5, 0xf5, 0x40, 0xd7, 0x21, 0x38, 0x22, 0xe2, 0x82,
		0x34, 0x0e, 0x26, 0xaa, 0x0a, 0xce, 0x94, 0x76, 0xb1, 0xac,
		0x62, 0x50, 0x3f, 0x1a, 0x7c, 0x66, 0x78, 0xb3, 0x86, 0x3e,
		0x4d, 0x4f,
	],
	nonce = [
		0x54, 0xe3, 0xf0, 0xa8, 0x06, 0x86, 0x26, 0xd8, 0xd7, 0x7e,
		0x26, 0x23, 0x3b, 0x95, 0xbf, 0x44, 0x30, 0x9e, 0xf6, 0xe4,
		0x00, 0x65, 0xff, 0x1a,
	],
	mac = [
		0x14, 0x23, 0x9b, 0xb3, 0xa3, 0x35, 0x9a, 0x11, 0x9c, 0x1d,
		0x79, 0x65, 0x4b, 0xe2, 0x2f, 0xaf,
	],
	...
};

const polyaligned: sample = sample {
	key = [
		0x8a, 0x67, 0xe3, 0x6c, 0x24, 0xbd, 0x05, 0x7f, 0x53, 0x7d,
		0x3b, 0x2d, 0x25, 0x98, 0x7c, 0x21, 0xb1, 0x51, 0x90, 0xdd,
		0x7a, 0x4a, 0x52, 0x49, 0x12, 0x22, 0x3e, 0x7e, 0x2e, 0x0d,
		0x8a, 0x15,
	],
	msg = [
		0xa1, 0x9c, 0x40, 0xbe, 0x6e, 0xf7, 0x43, 0x66, 0xcf, 0xe1,
		0x15, 0xce, 0x0c, 0x90, 0x7c, 0x1f, 0x35, 0xfb, 0x03, 0x7f,
		0x96, 0x62, 0x53, 0xa6, 0xfa, 0xf1, 0x31, 0x39, 0xae, 0x69,
		0x0e, 0xf7,
	],
	nonce = [
		0xc2, 0x16, 0x80, 0x49, 0xd1, 0x82, 0x04, 0xc5, 0x89, 0xee,
		0xbc, 0x24, 0xa0, 0x37, 0x6f, 0xbb, 0x44, 0x09, 0x49, 0x8e,
		0xe2, 0x73, 0x33, 0x4d,
	],
	additional = [
		0xc1, 0xf7, 0xa5, 0xcf, 0x2f, 0xc0, 0x21, 0x55, 0x74, 0xfb,
		0x75, 0xcd, 0x8b, 0x9e, 0xe2, 0x2a,
	],
	cipher = [
		0xfe, 0xe1, 0xb9, 0xff, 0xc5, 0x03, 0x38, 0x73, 0xbb, 0x1c,
		0x90, 0x7b, 0x53, 0x39, 0x65, 0xd7, 0x64, 0x12, 0xe4, 0x88,
		0xa0, 0xaa, 0x8e, 0x11, 0x23, 0xd0, 0x20, 0x8a, 0x54, 0x76,
		0x12, 0x75,
	],
	mac = [
		0x7e, 0x80, 0x2c, 0x34, 0x45, 0x04, 0x5b, 0xff, 0x04, 0x58,
		0x36, 0xef, 0xe2, 0x55, 0xc8, 0x45,
	],
};

@test fn rfc() void = {
	let result: []u8 = alloc(rfcsample.msg...);
	defer free(result);

	let b = encrypt(&rfcsample.key, &rfcsample.nonce, result[..],
		rfcsample.additional[..]);

	assert(bytes::equal(rfcsample.cipher, b.2));
	assert(bytes::equal(rfcsample.nonce, b.1));
	assert(bytes::equal(rfcsample.mac, b.0));

	const plain = decrypt(&rfcsample.key, &b, rfcsample.additional);

	assert(plain is []u8);
	assert(bytes::equal(rfcsample.msg, plain as []u8));
};

@test fn rfcmultiadditonals() void = {
	let result: []u8 = alloc(rfcsample.msg...);
	defer free(result);

	let b = encrypt(&rfcsample.key, &rfcsample.nonce, result[..],
		rfcsample.additional[..4], rfcsample.additional[4..]);

	assert(bytes::equal(rfcsample.cipher, b.2));
	assert(bytes::equal(rfcsample.nonce, b.1));
	assert(bytes::equal(rfcsample.mac, b.0));

	const plain = decrypt(&rfcsample.key, &b, rfcsample.additional);

	assert(plain is []u8);
	assert(bytes::equal(rfcsample.msg, plain as []u8));
};

@test fn noadditional() void = {
	let result: []u8 = alloc(noadsample.msg...);
	defer free(result);

	let b = encrypt(&noadsample.key, &noadsample.nonce, result[..]);

	assert(bytes::equal(noadsample.cipher, b.2));
	assert(bytes::equal(noadsample.nonce, b.1));
	assert(bytes::equal(noadsample.mac, b.0));

	const plain = decrypt(&noadsample.key, &b);

	assert(plain is []u8);
	assert(bytes::equal(noadsample.msg, plain as []u8));
};

@test fn nomsg() void = {
	let result: []u8 = [];
	defer free(result);

	let b = encrypt(&nomsg.key, &nomsg.nonce, result[..], nomsg.additional);

	assert(bytes::equal([], b.2));
	assert(bytes::equal(nomsg.nonce, b.1));
	assert(bytes::equal(nomsg.mac, b.0));

	const plain = decrypt(&nomsg.key, &b, nomsg.additional);

	assert(plain is []u8);
	assert(bytes::equal([], plain as []u8));
};

@test fn nothing() void = {
	let result: []u8 = [];
	defer free(result);

	let b = encrypt(&nothing.key, &nothing.nonce, result[..]);

	assert(bytes::equal([], b.2));
	assert(bytes::equal(nothing.nonce, b.1));
	assert(bytes::equal(nothing.mac, b.0));

	const plain = decrypt(&nothing.key, &b);

	assert(plain is []u8);
	assert(bytes::equal([], plain as []u8));
};

@test fn polyaligned() void = {
	let result: []u8 = alloc(polyaligned.msg...);
	defer free(result);

	let b = encrypt(&polyaligned.key, &polyaligned.nonce, result[..],
		polyaligned.additional[..]);

	assert(bytes::equal(polyaligned.cipher, b.2));
	assert(bytes::equal(polyaligned.nonce, b.1));
	assert(bytes::equal(polyaligned.mac, b.0));

	const plain = decrypt(&polyaligned.key, &b, polyaligned.additional);

	assert(plain is []u8);
	assert(bytes::equal(polyaligned.msg, plain as []u8));
};


@test fn invalidkey() void = {
	const zero: [114]u8 = [0...];

	let key = rfcsample.key;
	key[0] = 0x00;

	let cipher: []u8 = alloc(rfcsample.cipher...);
	defer free(cipher);

	let b: box = (rfcsample.mac, rfcsample.nonce, cipher[..]);

	const plain = decrypt(&key, &b, rfcsample.additional);

	assert(plain is errors::invalid);
	assert(bytes::equal(zero, cipher));
};

@test fn invalidcipher() void = {
	const zero: [114]u8 = [0...];

	let cipher: []u8 = alloc(rfcsample.cipher...);
	defer free(cipher);
	cipher[0] = 0x00;

	let b: box = (rfcsample.mac, rfcsample.nonce, cipher[..]);

	const plain = decrypt(&rfcsample.key, &b, rfcsample.additional);

	assert(plain is errors::invalid);
	assert(bytes::equal(zero, cipher));
};

@test fn invalidcipher2() void = {

	let cipher: []u8 = alloc(rfcsample.cipher...);
	defer free(cipher);
	append(cipher, 0xff);

	let b: box = (rfcsample.mac, rfcsample.nonce, cipher[..]);

	const plain = decrypt(&rfcsample.key, &b, rfcsample.additional);

	assert(plain is errors::invalid);

	const zero: [115]u8 = [0...];
	assert(bytes::equal(zero, cipher));
};

@test fn invalidcipher3() void = {
	let cipher: []u8 = alloc(rfcsample.cipher...);
	defer free(cipher);
	delete(cipher[len(cipher) - 1]);

	let b: box = (rfcsample.mac, rfcsample.nonce, cipher[..]);

	const plain = decrypt(&rfcsample.key, &b, rfcsample.additional);

	assert(plain is errors::invalid);

	const zero: [113]u8 = [0...];
	assert(bytes::equal(zero, cipher));
};

@test fn invalidaddition() void = {
	const zero: [114]u8 = [0...];

	let cipher: []u8 = alloc(rfcsample.cipher...);
	defer free(cipher);

	let ad: []u8 = alloc(rfcsample.additional...);
	defer free(ad);
	ad[0] = 0x00;

	let b: box = (rfcsample.mac, rfcsample.nonce, cipher[..]);

	const plain = decrypt(&rfcsample.key, &b, ad);

	assert(plain is errors::invalid);
	assert(bytes::equal(zero, cipher));
};

@test fn invalidaddition2() void = {
	const zero: [114]u8 = [0...];

	let cipher: []u8 = alloc(rfcsample.cipher...);
	defer free(cipher);

	let ad: []u8 = alloc(rfcsample.additional...);
	defer free(ad);
	append(ad, 0xff);

	let b: box = (rfcsample.mac, rfcsample.nonce, cipher[..]);

	const plain = decrypt(&rfcsample.key, &b, ad);

	assert(plain is errors::invalid);
	assert(bytes::equal(zero, cipher));
};

@test fn invalidaddition3() void = {
	const zero: [114]u8 = [0...];

	let cipher: []u8 = alloc(rfcsample.cipher...);
	defer free(cipher);

	let ad: []u8 = alloc(rfcsample.additional...);
	defer free(ad);
	delete(ad[len(ad) - 1]);

	let b: box = (rfcsample.mac, rfcsample.nonce, cipher[..]);

	const plain = decrypt(&rfcsample.key, &b, ad);

	assert(plain is errors::invalid);
	assert(bytes::equal(zero, cipher));
};

@test fn invalidaddition4() void = {
	const zero: [114]u8 = [0...];

	let cipher: []u8 = alloc(rfcsample.cipher...);
	defer free(cipher);

	let b: box = (rfcsample.mac, rfcsample.nonce, cipher[..]);

	const plain = decrypt(&rfcsample.key, &b);

	assert(plain is errors::invalid);
	assert(bytes::equal(zero, cipher));
};

@test fn invalidaddition5() void = {
	const zero: [114]u8 = [0...];

	let cipher: []u8 = alloc(rfcsample.cipher...);
	defer free(cipher);

	let b: box = (rfcsample.mac, rfcsample.nonce, cipher[..]);

	const plain = decrypt(&rfcsample.key, &b, rfcsample.additional, [0xff]);

	assert(plain is errors::invalid);
	assert(bytes::equal(zero, cipher));
};

@test fn cipheradditionswap() void = {
	let additional: []u8 = alloc(rfcsample.additional...);
	defer free(additional);

	let b: box = (rfcsample.mac, rfcsample.nonce, additional);

	const plain = decrypt(&rfcsample.key, &b, rfcsample.cipher);

	assert(plain is errors::invalid);

	const zero: [12]u8 = [0...];
	assert(bytes::equal(zero, additional));
};

@test fn invalidmac() void = {
	const zero: [114]u8 = [0...];

	let cipher: []u8 = alloc(rfcsample.cipher...);
	defer free(cipher);

	let mac: mac = rfcsample.mac;
	mac[0] = 0xff;

	let b: box = (mac, rfcsample.nonce, cipher[..]);

	const plain = decrypt(&rfcsample.key, &b, rfcsample.additional);

	assert(plain is errors::invalid);
	assert(bytes::equal(zero, cipher));
};
