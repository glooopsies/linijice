use cairo;
use pango;
use glib;
use types::c;
export type Font = *opaque;
export @symbol("pango_cairo_font_get_scaled_font") fn font_get_scaled_font(font: *Font) *cairo::ScaledFont;
export type FontMap = *opaque;
export @symbol("pango_cairo_font_map_create_context") fn font_map_create_context(fontmap: *FontMap) *pango::Context;
export @symbol("pango_cairo_font_map_get_font_type") fn font_map_get_font_type(fontmap: *FontMap) cairo::FontType;
export @symbol("pango_cairo_font_map_get_resolution") fn font_map_get_resolution(fontmap: *FontMap) f64;
export @symbol("pango_cairo_font_map_set_default") fn font_map_set_default(fontmap: *FontMap) void;
export @symbol("pango_cairo_font_map_set_resolution") fn font_map_set_resolution(fontmap: *FontMap, dpi: f64) void;
export @symbol("pango_cairo_font_map_get_default") fn font_map_get_default() *pango::FontMap;
export @symbol("pango_cairo_font_map_new") fn font_map_new() *pango::FontMap;
export @symbol("pango_cairo_font_map_new_for_font_type") fn font_map_new_for_font_type(fonttype: cairo::FontType) *pango::FontMap;
export @symbol("pango_cairo_context_get_font_options") fn context_get_font_options(context: *pango::Context) *cairo::FontOptions;
export @symbol("pango_cairo_context_get_resolution") fn context_get_resolution(context: *pango::Context) f64;
export @symbol("pango_cairo_context_get_shape_renderer") fn context_get_shape_renderer(context: *pango::Context, data: **opaque) ShapeRendererFunc;
export @symbol("pango_cairo_context_set_font_options") fn context_set_font_options(context: *pango::Context, options: *cairo::FontOptions) void;
export @symbol("pango_cairo_context_set_resolution") fn context_set_resolution(context: *pango::Context, dpi: f64) void;
export @symbol("pango_cairo_context_set_shape_renderer") fn context_set_shape_renderer(context: *pango::Context, func: ShapeRendererFunc, data: *opaque, dnotify: glib::DestroyNotify) void;
export @symbol("pango_cairo_create_context") fn create_context(cr: *cairo::Context) *pango::Context;
export @symbol("pango_cairo_create_layout") fn create_layout(cr: *cairo::Context) *pango::Layout;
export @symbol("pango_cairo_error_underline_path") fn error_underline_path(cr: *cairo::Context, x: f64, y: f64, width: f64, height: f64) void;
export @symbol("pango_cairo_glyph_string_path") fn glyph_string_path(cr: *cairo::Context, font: *pango::Font, glyphs: *pango::GlyphString) void;
export @symbol("pango_cairo_layout_line_path") fn layout_line_path(cr: *cairo::Context, line: *pango::LayoutLine) void;
export @symbol("pango_cairo_layout_path") fn layout_path(cr: *cairo::Context, layout: *pango::Layout) void;
export @symbol("pango_cairo_show_error_underline") fn show_error_underline(cr: *cairo::Context, x: f64, y: f64, width: f64, height: f64) void;
export @symbol("pango_cairo_show_glyph_item") fn show_glyph_item(cr: *cairo::Context, text: *c::char, glyph_item: *pango::GlyphItem) void;
export @symbol("pango_cairo_show_glyph_string") fn show_glyph_string(cr: *cairo::Context, font: *pango::Font, glyphs: *pango::GlyphString) void;
export @symbol("pango_cairo_show_layout") fn show_layout(cr: *cairo::Context, layout: *pango::Layout) void;
export @symbol("pango_cairo_show_layout_line") fn show_layout_line(cr: *cairo::Context, line: *pango::LayoutLine) void;
export @symbol("pango_cairo_update_context") fn update_context(cr: *cairo::Context, context: *pango::Context) void;
export @symbol("pango_cairo_update_layout") fn update_layout(cr: *cairo::Context, layout: *pango::Layout) void;
export type ShapeRendererFunc = *fn(cr: *cairo::Context, attr: *pango::AttrShape, do_path: glib::boolean, data: *opaque) void;
